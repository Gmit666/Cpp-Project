int i=0,j=1,count = 0,gate = 0,m,n;//Need to return to check this for bugs
    char c;
    if(symbol == 'X')
    {
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//Down right
        {
            m++,n++;
            if(m == size || n == size)
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1] + j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1] + i] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//Up right
        {
            m--,n++;
            if(m == -1 || n == size)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1] + j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1] + i] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//down left
        {
            m++,n--;
            if(m == size || n == -1 )
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1] - j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }

        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1] - i] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//up left
        {
            m--,n--;
            if(m == -1 || n == -1)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1] - j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1] - i] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }
    }
    if(symbol == 'O')
    {
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++) //Down right
        {
            m++,n++;
            if(m== size ||n == size)
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1] + j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1] + i] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//up right
        {
            m--,n++;
            if(m == -1||n == size)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1] + j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1] + i] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//down left
        {
            m++,n--;
            if(m == size ||n == -1)
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1] - j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1] - i] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m = Pos[0];
        n = Pos[1];
        for(i=0;i<(size -1);i++)//up left
        {
            m--,n--;
            if(m == -1|| n == -1)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1] - j];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }

        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1] - i] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
    }
    return false;