bool Game::Vertical(char **Board, int *Pos, int size, char symbol,int flip,int *ptr) {
    int i=0,j=1,count = 0,gate = 0,m;
    char c;
    
    if(symbol == 'X')
    {
        m = Pos[0];
        for(i=0;i<size;i++)// down
        {
            m++;
            if(m == size)
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1]];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1]] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m=Pos[0];
        for(i=0;i<size;i++) // up
        {
            m--;
            if(m == -1)
            {
                break;
            }
            if(Pos[0] == 0)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1]];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'O')
            {
                count++;
                continue;
            }
            if(c == 'X')
            {
                gate = 1;
                break;
            }

        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1]] = 'X';
                }
            }
            *ptr+=count;
            return true;
        }

    }
    j=1;
    if(symbol == 'O')
    {
        m= Pos[0];
        for(i=0;i<size;i++)
        {
            m++;
            if(m==size)
            {
                break;
            }
            c = Board[Pos[0] + j][Pos[1]];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }
        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] + i][Pos[1]] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
        j=1;
        m=Pos[0];
        for(i=0;i<size;i++)
        {
            m--;
            if(m == -1)
            {
                break;
            }
            c = Board[Pos[0] - j][Pos[1]];
            j++;
            if(c == '-')
            {
                gate = 0;
                count = 0;
                break;
            }
            if(c == 'X')
            {
                count++;
                continue;
            }
            if(c == 'O')
            {
                gate = 1;
                break;
            }

        }
        if(count > 0 && gate == 1)
        {
            if(flip == 1)
            {
                for(i=0;i<count + 1;i++)
                {
                    Board[Pos[0] - i][Pos[1]] = 'O';
                }
            }
            *ptr+=count;
            return true;
        }
    return false;
}